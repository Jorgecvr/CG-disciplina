// Definindo e testando as colisões com a parede
function collisionWithWall() {
    // //Pegando a rotação dos tanques em relação ao mundo
    // const tankRotationQuaternion1 = new THREE.Quaternion();
    // tank_player1.object.getWorldQuaternion(tankRotationQuaternion1);

    // const tankRotationQuaternion2 = new THREE.Quaternion();
    // tank_player2.object.getWorldQuaternion(tankRotationQuaternion2);

    // Testando colisão com parede da direita:
    let paredeD = {
        obj: paredeDireita,
        width: 4,
        height: 4,
        depth: 124,
        children: 0,
    }
    let collisionsPD = CheckCollisions(tank_player1.object, tank_player2.object, paredeD);

    // Testando colisão com a parede da esquerda:
    let paredeE = {
        obj: paredeEsquerda,
        width: 4,
        height: 4,
        depth: 124,
        children: 0,
    }
    let collisionsPE = CheckCollisions(tank_player1.object, tank_player2.object, paredeE);

    // Testando colisão com paredes de tras:
    let paredeT1 = {
        obj: paredeTras,
        width: 76,
        height: 4,
        depth: 4,
        children: 0
    }
    let collisionsPT1 = CheckCollisions(tank_player1.object, tank_player2.object, paredeT1);

    let paredeT2 = {
        obj: paredeTras,
        width: 76,
        height: 4,
        depth: 4,
        children: 2
    }
    let collisionsPT2 = CheckCollisions(tank_player1.object, tank_player2.object, paredeT2);

    let paredeT3 = {
        obj: paredeTras,
        width: 20,
        height: 4,
        depth: 4,
        children: 1
    }
    let collisionsPT3 = CheckCollisions(tank_player1.object, tank_player2.object, paredeT3);

    let paredeT4 = {
            obj: paredeTras,
            width: 20,
            height: 4,
            depth: 4,
            children: 24
    }
    let collisionsPT4 = CheckCollisions(tank_player1.object, tank_player2.object, paredeT4);
}

// Função utilizada para mover o tanque com base na colisão e na rotação do tanque
// function tankMovement(collision) {
//     // Pegando a rotação dos tanques em relação ao mundo
//     const tankRotationQuaternion1 = new THREE.Quaternion();
//     tank_player1.object.getWorldQuaternion(tankRotationQuaternion1);

//     const tankRotationQuaternion2 = new THREE.Quaternion();
//     tank_player2.object.getWorldQuaternion(tankRotationQuaternion2);

//     // Tratando as colisões
//     if( collision == 0 ) {
//         moveTank(0, tank_player1.object, 0, tank_player1.speedZ, -tank_player1.speedZ);
//         moveTank(1, tank_player2.object, 0, tank_player2.speedZ, -tank_player2.speedZ);
//     }
//     else if (collision == 1) { 
//         moveTank(1, tank_player2.object, 0, tank_player2.speedZ, -tank_player2.speedZ);

//         if(tankRotationQuaternion1.y <= -0.69 && tankRotationQuaternion1.y >= -0.72 ) {
//             moveTank(0, tank_player1.object, 0, tank_player1.speedZ, 0);
//         }
//         else if(tankRotationQuaternion1.y > -0.69 && tankRotationQuaternion1.y < 0.0 ) { 
//             moveTank(0, tank_player1.object, -tank_player1.speedX, tank_player1.speedZ, 0);
//         }
//         else if( tankRotationQuaternion1.y < -0.72 ) {
//             moveTank(0, tank_player1.object, tank_player1.speedX, tank_player1.speedZ, 0); 
//         }
//         else if( tankRotationQuaternion1.y >= 0.69 && tankRotationQuaternion1.y <= 0.72 ) {
//             moveTank(0, tank_player1.object, 0, 0, -tank_player1.speedZ);
//         }
//         else if( tankRotationQuaternion1.y > 0.0 && tankRotationQuaternion1.y < 0.69 ) {
//             moveTank(0, tank_player1.object, -tank_player1.speedX, 0, -tank_player1.speedZ); 
//         }
//         else if( tankRotationQuaternion1.y > 0.72 ) {
//             moveTank(0, tank_player1.object, tank_player1.speedX, 0, -tank_player1.speedZ);
//         }
//     }
//     else if (collision == 2) {
//         console.log(tankRotationQuaternion2);
//         moveTank(0, tank_player1.object, 0, tank_player1.speedZ, -tank_player1.speedZ);

//         if(tankRotationQuaternion2.y <= -0.69 && tankRotationQuaternion2.y >= -0.72 ) {
//             moveTank(1, tank_player2.object, 0, tank_player2.speedZ, 0);
//         }
//         else if(tankRotationQuaternion2.y > -0.69 && tankRotationQuaternion2.y < 0.0 ) { 
//             moveTank(1, tank_player2.object, -tank_player2.speedX, tank_player2.speedZ, 0);
//         }
//         else if( tankRotationQuaternion2.y < -0.72 ) {
//             moveTank(1, tank_player2.object, tank_player2.speedX, tank_player2.speedZ, 0); 
//         }
//         else if( tankRotationQuaternion2.y >= 0.69 && tankRotationQuaternion2.y <= 0.72 ) {
//             moveTank(1, tank_player2.object, 0, tank_player2.speedZ, 0);
//         }
//         else if( tankRotationQuaternion2.y > 0.0 && tankRotationQuaternion2.y < 0.69 ) {
//             moveTank(1, tank_player2.object, -tank_player2.speedX, 0, -tank_player2.speedZ); 
//         }
//         else if( tankRotationQuaternion2.y > 0.72 ) {
//             moveTank(1, tank_player2.object, tank_player2.speedX, tank_player2.speedZ, 0);
//         }
//     }
//     else {
//         if(tankRotationQuaternion1.y <= -0.69 && tankRotationQuaternion1.y >= -0.72 ) {
//             moveTank(0, tank_player1.object, 0, tank_player1.speedZ, 0);
//         }
//         else if(tankRotationQuaternion1.y > -0.69 && tankRotationQuaternion1.y < 0.0 ) { 
//             moveTank(0, tank_player1.object, -tank_player1.speedX, tank_player1.speedZ, 0);
//         }
//         else if( tankRotationQuaternion1.y < -0.72 ) {
//             moveTank(0, tank_player1.object, tank_player1.speedX, tank_player1.speedZ, 0); 
//         }
//         else if( tankRotationQuaternion1.y >= 0.69 && tankRotationQuaternion1.y <= 0.72 ) {
//             moveTank(0, tank_player1.object, 0, 0, -tank_player1.speedZ);
//         }
//         else if( tankRotationQuaternion1.y > 0.0 && tankRotationQuaternion1.y < 0.69 ) {
//             moveTank(0, tank_player1.object, -tank_player1.speedX, 0, -tank_player1.speedZ); 
//         }
//         else if( tankRotationQuaternion1.y > 0.72 ) {
//             moveTank(0, tank_player1.object, tank_player1.speedX, 0, -tank_player1.speedZ);
//         }

//         if(tankRotationQuaternion2.y <= -0.69 && tankRotationQuaternion2.y >= -0.72 ) {
//             moveTank(1, tank_player2.object, 0, tank_player2.speedZ, 0);
//         }
//         else if(tankRotationQuaternion2.y > -0.69 && tankRotationQuaternion2.y < 0.0 ) { 
//             moveTank(1, tank_player2.object, -tank_player2.speedX, tank_player2.speedZ, 0);
//         }
//         else if( tankRotationQuaternion2.y < -0.72 ) {
//             moveTank(1, tank_player2.object, tank_player2.speedX, tank_player2.speedZ, 0); 
//         }
//         else if( tankRotationQuaternion2.y >= 0.69 && tankRotationQuaternion2.y <= 0.72 ) {
//             moveTank(1, tank_player2.object, 0, 0, -tank_player2.speedZ);
//         }
//         else if( tankRotationQuaternion2.y > 0.0 && tankRotationQuaternion2.y < 0.69 ) {
//             moveTank(1, tank_player2.object, -tank_player2.speedX, 0, -tank_player2.speedZ); 
//         }
//         else if( tankRotationQuaternion2.y > 0.72 ) {
//             moveTank(1, tank_player2.object, tank_player2.speedX, tank_player2.speedZ, 0);
//         }
//     }
// }

// Dividindo a parede para testar colisões
var paredeDireita = new THREE.Object3D();
var paredeTras = new THREE.Object3D();
var paredeEsquerda = new THREE.Object3D();
for(let i = 0; i < 17; i++) {
    paredeDireita.add(wall.children[0]);
}
for(let i = 0; i < 26; i++) {
    paredeTras.add(wall.children[0]);
}
for(let i = 0; i < 17; i++) {
    paredeEsquerda.add(wall.children[0]);
}
scene.add(paredeDireita);
scene.add(paredeTras);
scene.add(paredeEsquerda);